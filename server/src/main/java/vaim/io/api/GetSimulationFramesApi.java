/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package vaim.io.api;

import java.util.LinkedList;
import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import vaim.io.api.structures.SimulationChunk;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-10-19T10:26:20.656Z[GMT]")
@Api(value = "get_simulation_frames", description = "the get_simulation_frames API")
public interface GetSimulationFramesApi extends GeneralApi{

	@CrossOrigin(origins = ORIGIN)
    @ApiOperation(value = "Get a number of simulation frames along with the activated vertices for visualization", nickname = "getSimulationFrames", notes = "Get a number of simulation frames along with the activated vertices for visualization", response = SimulationChunk.class, responseContainer = "List", tags={ "Action", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Query completed.", response = SimulationChunk.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Error while performing query.") })
    @RequestMapping(value = "/get_simulation_frames",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<SimulationChunk>> getSimulationFrames(@NotNull @ApiParam(value = "The current session id - necessary to recover the current matrix state", required = true) @Valid @RequestParam(value = "session_id", required = true) String sessionId
,@ApiParam(value = "the list of simulations to load" ,required=true )  @Valid @RequestBody LinkedList<String> body
,@ApiParam(value = "The initial frame. Defaults to zero.", defaultValue = "0") @Valid @RequestParam(value = "framestart", required = false, defaultValue="0") Integer framestart
,@ApiParam(value = "The final frame. Defaults to the whole computation") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@ApiParam(value = "Describes how (and if) to aggregate frames. Defaults to 1.", defaultValue = "1") @Valid @RequestParam(value = "aggregation", required = false, defaultValue="1") Integer aggregation
,@ApiParam(value = "Describes how to provide the data to the user, if only by statistics or with the exact ids of the vertices too.") @Valid @RequestParam(value = "full_delivery", required = false) Boolean fullDelivery
);

}

